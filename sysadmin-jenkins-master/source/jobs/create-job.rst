.. _create-job:

###############
Setting up jobs
###############

============
Introduction
============

A build job is a particular way of compiling, testing, packaging, deploying or otherwise doing something
with your project. Build jobs come in a variety of forms; you may want to compile and unit test your
application, report on code quality metrics related to the source code, generate documentation, bundle
up an application for a release, deploy it to production, run an automated smoke test, or do any number
of other similar tasks.

=============
Types of jobs
=============

Creating a new build job in Jenkins is simple: just click on the “New Job” menu item on the Jenkins
dashboard. Jenkins supports several different types of build jobs, which are presented to you when you
choose to create a new job, Jenkins supports four main types of build jobs as in the figure below.

.. image:: img/jobs.png

- **Freestyle software project**: Freestyle build jobs are general-purpose build jobs, which provides a maximum of flexibility.
- **Maven project**: The “maven2/3 project” is a build job specially adapted to Maven projects. Jenkins understands Maven pom files and project structures, and can use the information gleaned from the pom file to reduce the work you need to do to set up your project.
- **Monitor an external job**: The “Monitor an external job” build job lets you keep an eye on non-interactive processes, such as cron jobs.
- **Multiconfiguration job**: The “multiconfiguration project” (also referred to as a “matrix project”) lets you run the same build job in many different configurations. This powerful feature can be useful for testing an application in many different environments, with different databases, or even on different build machines. We will be looking at how to configure multiconfiguration build jobs later on in the book.
In this manual will be explained the **Freestyle software project** tipe.

==============================
Creating a Freestyle Build Job
==============================

The freestyle build job is the most flexible and configurable option, and can be used for any type of
project. It is relatively straightforward to set up, and many of the options we configure here also appear
in other build jobs.

General Options
---------------

The first section you see when you create a new freestyle job contains general information about the
project, such as a unique name and description, and other information about how and where the build
job should be executed.

.. figure:: img/create_build_job.png
   
	    Keeping a build job forever

The project name can be anything you like, but it is worth noting that it will be used for the project
directory and the build job URL, so I generally avoid names with spaces. The project description will go
on the project home page—use this to provide an overview of the build job’s goals and context. HTML
tags will work fine in this field.
The other options are more technical, and we will be looking at some of them in detail later on in the
book.
One important aspect that you should think about upfront is how you want to handle build history. Build
jobs can consume a lot of disk space, especially if you store the build artifacts (the binary files, such
as JARs, WARs, TARs, etc., generated by your build job). Even without artifacts, keeping a record
of every build job consumes additional disk space and memory, which may or may not be justified,
depending on the nature of your build job. For example, for a code quality metrics build that reports on
static analysis and code coverage metrics over time, you might want to keep a record of the builds for
the duration of the project, whereas, for a build job that automatically deploys an application to a test
server, keeping the build history and artifacts for posterity might be less important.
The Discard Old Builds option lets you limit the number of builds you record in the build history. You
can either tell Jenkins to only keep recent builds (Jenkins will delete builds after a certain number of
days), or to keep no more than a specified number of builds. If a certain build has particular sentimental
value, you can always tell Jenkins to keep it forever by using the Keep forever button on the build details
page (see Figure, “Keeping a build job forever”). Note that this button will only appear if you have
asked Jenkins to discard old builds.
